---
description: 
globs: 
alwaysApply: true
---
# FuseStorageKit .cursorrules

# 命名規則
- 所有內部元件的名稱應多個詞組成，不應一個詞。例如：`Cache`、`Handler`。
- Protocol 的命名應以 "able" 結尾，例如：`Persistable`、`Syncable`。
- 使用依賴注入的類別應有明確的單詞命名，如：`Injector`。

# 結構規則
- 將所有 protocol 定義放在 `Protocols` 資料夾中，方便組織和查找。
- 將所有與 database 相關的邏輯放在 `database` 資料夾中。
- 將所有與 file management 相關的邏輯放在 `file` 資料夾中。
- 將所有與 user defaults 相關的邏輯放在 `preferences` 資料夾中。
- 所有涉及同步到 remote 的方法應集中在一個類別中，例如：`sync`。

# 測試規則
- 所有的測試文件應放在 `Tests` 資料夾中，並遵循與被測試模組相同的命名。
- 使用 XCTest 框架進行單元測試。
- 每個功能模組 (如 database, file management) 應有對應的測試文件，例如：`DatabaseTests.swift`。

# 同步規則

- 確保同步方法支持異步操作，並提供 completion handler 或使用 Swift 的 `async`/`await` 進行處理。

# 訪問控制
- 明確指定每個類和方法的訪問級別（public、private、internal），以確保 API 的清晰性和安全性。
- 公共 API 應標記為 `public`，而內部實現細節應標記為 `private` 或 `internal`。
- 避免不必要的公開類和方法，以保護內部邏輯。

# 註解規則
- 註解使用英文
- 為 `public` 的 function/class/struct 提供提供說明

# 現代化開發規則
- 優先使用 Swift 的 `async`/`await` 代替 GCD 進行異步操作，以提高代碼可讀性和安全性。
- 使用 Combine 框架進行響應式編程（如適用），以提高代碼的現代化和靈活性。
- 使用 Swift 標準庫中的現代功能，如 `Result` 類型，來處理錯誤和成功案例。

# 代碼風格
- 遵循 Swift 的官方編碼風格指南，以保持代碼的一致性和可讀性。
- 確保所有 public API 都有詳細的文檔註釋，包括參數和返回值的說明。
